install.packages("brms")
library(tidyverse)
library(stringr)
library(brms)
library(rstan)
library(gtools)
knitr::opts_chunk$set(echo = FALSE, warning=F)
options(knitr.table.format = "html")
library(knitr)
library(lme4)
library(xtable)
process_data <- function(source){
#source = .rds file location of data
#returns tibble of data after participant removal, and with only correct answers
data <- read_rds(source)
data_filtered <- data %>%
filter(citizen=="yes" & native=="yes" & resident=="yes")
message("Removed ", format(100-100*nrow(data_filtered)/nrow(data), digits=2), "% participants who are not citizens, native speakers, or residents of the US.")
message("We have ", length(unique(data_filtered$subject)), " participants left.")
#filter out and adjust bad data points
#remove na points that participants didn't see
data_no_na<- data_filtered %>%
filter(!(is.na(rt)))
message("Removed ", format(100-100*nrow(data_no_na)/nrow(data_filtered), digits=2), "% of the data for being na (after a mistake).")
#remove mistakes
data_cleaned <- data_no_na %>%
filter(correct=="yes") %>%
select(-correct)
message("Removed ", format(100-100*nrow(data_cleaned)/nrow(data_no_na), digits=2), "% of the data for not having correct answer.")
message(format(100*nrow(data_cleaned)/nrow(data_filtered), digits=2), "% of possible data is left" )
data_no_0 <-  data_cleaned %>%
filter(rt!=0)
message("Removed ", format(100-100*nrow(data_no_0)/nrow(data_cleaned), digits=2), "% of the data for having a RT of 0.")
data_no_0
}
process_spr <- function(source){
#source = .rds file location of data
#returns tibble of data after participant removal, and with only correct answers
data <- read_rds(source)
data_filtered <- data %>%
filter(citizen=="yes" & native=="yes" & resident=="yes") %>%
mutate(word_num=word_num-1)
message("Removed ", format(100-100*nrow(data_filtered)/nrow(data), digits=2), "% participants who are not citizens, native speakers, or residents of the US.")
message("We have ", length(unique(data_filtered$subject)), " participants left.")
data_accurate <- data_filtered %>%
filter(accuracy>.8)
message("Removed ", format(100-100*nrow(data_accurate)/nrow(data_filtered), digits=2), "% participants who did not get at least 80% of comprehension questions correct.")
message("We have ", length(unique(data_accurate$subject)), " participants left.")
#filter out and adjust bad data points
#remove na points that participants didn't see
data_no_na<- data_accurate %>%
filter(!(is.na(rt)))
message("Removed ", format(100-100*nrow(data_no_na)/nrow(data_accurate), digits=2), "% of the data for being na.")
data_no_0 <-  data_no_na %>%
filter(rt!=0)
message("Removed ", format(100-100*nrow(data_no_0)/nrow(data_no_na), digits=2), "% of the data for having a RT of 0.")
data_no_0
}
for_model <- function(data, type){
#data is tibble of data (output of process_data), type is "rel", "adv", or "noun"
rel_labelled <- read_rds("../Labelled/rel_clause_labelled.rds")
adv_labelled <- read_rds("../Labelled/adv_clause_labelled.rds")
noun_labelled <- read_rds("../Labelled/noun_clause_labelled.rds")
if(type=="rel"){
data_rel <- data %>%
filter(type=="relative_high"| type=="relative_low") %>%
left_join(rel_labelled, by=c("word_num", "sentence", "type", "word", "group"="item_num")) %>%
mutate(item.factor=as.factor(group),
type.numeric=ifelse(type=="relative_low", 0, 1)) #treatment code expected as 0, unusual as 1
return(data_rel)}
if(type=="adv"){
data_adv<- data %>%
filter(type=="adverb_high"|type=="adverb_low") %>%
left_join(adv_labelled, by=c("word_num", "sentence", "type", "word", "group"="item_num")) %>%
mutate(mod_word_number=ifelse(multi_word=="yes"&mod_word_number>0, mod_word_number-1, mod_word_number)) %>%
group_by(subject, group, mod_word_number, type) %>%
summarize(rt=mean(rt)) %>%
mutate(item.factor=as.factor(group),
type.numeric=ifelse(type=="adverb_low", 0, 1)) #treatment code expected as 0, unusual as 1
return(data_adv)}
if(type=="noun"){
data_noun <- data%>%
filter(type=="and_no_comma"|type=="and_comma") %>%
left_join(noun_labelled, by=c("word_num", "sentence", "type", "word", "group"="item_num")) %>%
mutate(item.factor=as.factor(group),
type.numeric=ifelse(type=="and_comma", 0, 1)) #treatment code expected as 0, unusual as 1
return(data_noun)
}
}
brm_modelling <- function(data){
results <- tibble(mod_word_num=NA, mean=NA, low=NA, high=NA, above=NA, intercept=NA)
for (i in (-5:5)){
data_test <- data %>% filter(mod_word_number==i)
system.time(model_test <- brm(log(rt) ~ type.numeric +(type.numeric|item.factor)+(type.numeric|subject), data_test))
fe <- fixef(model_test)
above <- mean(extract(model_test$fit, "b_type.numeric")[[1]]>0)
results <- add_row(results, "mod_word_num"=i, "mean"=fe[2], "low"=fe[6], "high"=fe[8], "above"=above, "intercept"=fe[1])
}
results_fixed <- results %>% mutate(pval_equiv = signif(2*pmin(above,1-above), digits=2)) %>%
filter(!is.na(mod_word_num)) %>%
mutate(mean_ms=exp(mean+intercept)-exp(intercept),
low_ms=exp(low+intercept)-exp(intercept),
high_ms=exp(high+intercept)-exp(intercept))
results_fixed
}
rel_g <- process_data("../Data/Processed/g_maze.rds") %>%
for_model("rel")
rel_g_results <- brm_modelling(rel_g)
View(rel_g)
rel_g <- process_data("../Data/Processed/g_maze.rds") %>%
for_model("rel")
rel_g_results <- brm_modelling(rel_g)
View(rel_g_results)
rel_g_results <- rel_g_results %>% mutate(type="Web\nG-maze")
View(rel_g_results)
View(rel_g_results)
